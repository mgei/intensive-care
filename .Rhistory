Feld == "Betrag.Diverse" | Feld == "Betrag.Rabatt" | Feld == "Betrag.Korrekturen" ~ "Betrag.DiverseRabatt",
T                                              ~ Feld)) %>%
group_by(period, Feld) %>%
summarise(Wert = sum(Wert, na.rm = T)) %>%
ggplot(aes(x = period, y = Wert, fill = Feld, text = number(Wert, big.mark = "'", prefix = "CHF "))) +
geom_col(position = "stack")
name <- "Pratteln"
p <- data %>%
filter(Praxis == name,
period %in% seq(from = fromdate, to = todate, by = "months"),
Feld %in% c("Betrag.Diverse", "Betrag.Leistungen", "Betrag.Medikamente", "Betrag.Rabatt", "Betrag.Korrekturen", "Betrag.Technik", "Betrag.Labor")) %>%
mutate(Feld = case_when(Feld == "Betrag.Leistungen" & Funktion == "Za" ~ "Betrag.Leistungen.Za",
Feld == "Betrag.Leistungen" & Funktion != "Za" ~ "Betrag.Leistungen.nZa",
Feld == "Betrag.Diverse" | Feld == "Betrag.Rabatt" | Feld == "Betrag.Korrekturen" ~ "Betrag.DiverseRabatt",
T                                              ~ Feld)) %>%
group_by(period, Feld) %>%
summarise(Wert = sum(Wert, na.rm = T)) %>%
ggplot(aes(x = period, y = Wert, fill = Feld, text = number(Wert, big.mark = "'", prefix = "CHF "))) +
geom_col(position = "stack")
ata %>%
filter(Praxis == name,
period %in% seq(from = fromdate, to = todate, by = "months"),
Feld %in% c("Betrag.Diverse", "Betrag.Leistungen", "Betrag.Medikamente", "Betrag.Rabatt", "Betrag.Korrekturen", "Betrag.Technik", "Betrag.Labor"))
data %>%
filter(Praxis == name,
period %in% seq(from = fromdate, to = todate, by = "months"),
Feld %in% c("Betrag.Diverse", "Betrag.Leistungen", "Betrag.Medikamente", "Betrag.Rabatt", "Betrag.Korrekturen", "Betrag.Technik", "Betrag.Labor"))
fromdate
todate
seq(from = fromdate, to = todate, by = "months")
runApp('Documents/Econovo/dza-prototype/shiny')
fromdate
data %>%
filter(Praxis == name,
# period %in% seq(from = fromdate, to = todate, by = "months"),
between_na(period, fromdate, todate),
Feld %in% c("Betrag.Diverse", "Betrag.Leistungen", "Betrag.Medikamente", "Betrag.Rabatt", "Betrag.Korrekturen", "Betrag.Technik", "Betrag.Labor"))
data
data %>%
filter(Praxis == name
)
data %>%
filter(Praxis == name,
# period %in% seq(from = fromdate, to = todate, by = "months"),
between_na(period, fromdate, todate))
fromdate
todate
fromdate %>% class()
fromdate <- as.Date("2020-01-01")
todate <- as.Date("2020-12-01")
p <- data %>%
filter(Praxis == name,
# period %in% seq(from = fromdate, to = todate, by = "months"),
between_na(period, fromdate, todate),
Feld %in% c("Betrag.Diverse", "Betrag.Leistungen", "Betrag.Medikamente", "Betrag.Rabatt", "Betrag.Korrekturen", "Betrag.Technik", "Betrag.Labor")) %>%
mutate(Feld = case_when(Feld == "Betrag.Leistungen" & Funktion == "Za" ~ "Betrag.Leistungen.Za",
Feld == "Betrag.Leistungen" & Funktion != "Za" ~ "Betrag.Leistungen.nZa",
Feld == "Betrag.Diverse" | Feld == "Betrag.Rabatt" | Feld == "Betrag.Korrekturen" ~ "Betrag.DiverseRabatt",
T                                              ~ Feld)) %>%
group_by(period, Feld) %>%
summarise(Wert = sum(Wert, na.rm = T)) %>%
ggplot(aes(x = period, y = Wert, fill = Feld, text = number(Wert, big.mark = "'", prefix = "CHF "))) +
geom_col(position = "stack")
p
# if (input[[paste0("dev_viewperiod_", name)]] == "Monat") {
p <- p +
monthsscale(datelimits = date_development())
p <- p +
monthsscale(datelimits = c(fromdate, todate))
p
c(1,3)
c(1,3) + c(-1, +1)
scale_x_date(date_breaks = date_breaks, date_labels = date_labels,
limits = (datelimits + c(-1, +1)))
monthsscale <- function(date_breaks = "1 month", date_labels = "%b %y", datelimits = NULL) {
scale_x_date(date_breaks = date_breaks, date_labels = date_labels,
limits = (datelimits + c(-1, +1)))
}
p <- data %>%
filter(Praxis == name,
# period %in% seq(from = fromdate, to = todate, by = "months"),
between_na(period, fromdate, todate),
Feld %in% c("Betrag.Diverse", "Betrag.Leistungen", "Betrag.Medikamente", "Betrag.Rabatt", "Betrag.Korrekturen", "Betrag.Technik", "Betrag.Labor")) %>%
mutate(Feld = case_when(Feld == "Betrag.Leistungen" & Funktion == "Za" ~ "Betrag.Leistungen.Za",
Feld == "Betrag.Leistungen" & Funktion != "Za" ~ "Betrag.Leistungen.nZa",
Feld == "Betrag.Diverse" | Feld == "Betrag.Rabatt" | Feld == "Betrag.Korrekturen" ~ "Betrag.DiverseRabatt",
T                                              ~ Feld)) %>%
group_by(period, Feld) %>%
summarise(Wert = sum(Wert, na.rm = T)) %>%
ggplot(aes(x = period, y = Wert, fill = Feld, text = number(Wert, big.mark = "'", prefix = "CHF "))) +
geom_col(position = "stack")
p +
monthsscale(datelimits = date_development())
runApp('Documents/Econovo/dza-prototype/shiny')
p
p +
monthsscale(datelimits = c(fromdate, todate))
monthsscale <- function(date_breaks = "1 month", date_labels = "%b %y", datelimits = NULL) {
scale_x_date(date_breaks = date_breaks, date_labels = date_labels,
limits = (datelimits + c(-months(1), +months(1))))
}
p +
monthsscale(datelimits = c(fromdate, todate))
p + monthsscale(datelimits = c(fromdate, todate))
monthsscale <- function(date_breaks = "1 month", date_labels = "%b %y", datelimits = NULL) {
scale_x_date(date_breaks = date_breaks, date_labels = date_labels,
limits = (datelimits + c(-10, +10)))
}
p + monthsscale(datelimits = c(fromdate, todate))
monthsscale <- function(date_breaks = "1 month", date_labels = "%b %y", datelimits = NULL) {
scale_x_date(date_breaks = date_breaks, date_labels = date_labels,
limits = (datelimits + c(-100, +100)))
}
p + monthsscale(datelimits = c(fromdate, todate))
monthsscale <- function(date_breaks = "1 month", date_labels = "%b %y", datelimits = NULL) {
scale_x_date(date_breaks = date_breaks, date_labels = date_labels,
limits = (datelimits + c(-13, +13)))
}
monthsscale <- function(date_breaks = "1 month", date_labels = "%b %y", datelimits = NULL) {
scale_x_date(date_breaks = date_breaks, date_labels = date_labels,
limits = (datelimits + c(-13, +13)))
}
p + monthsscale(datelimits = c(fromdate, todate))
monthsscale <- function(date_breaks = "1 month", date_labels = "%b %y", datelimits = NULL) {
scale_x_date(date_breaks = date_breaks, date_labels = date_labels,
limits = (datelimits + c(-134, +13)))
}
p + monthsscale(datelimits = c(fromdate, todate))
monthsscale <- function(date_breaks = "1 month", date_labels = "%b %y", datelimits = NULL) {
scale_x_date(date_breaks = date_breaks, date_labels = date_labels,
limits = (datelimits + c(-15, +13)))
}
p + monthsscale(datelimits = c(fromdate, todate))
monthsscale <- function(date_breaks = "1 month", date_labels = "%b %y", datelimits = NULL) {
scale_x_date(date_breaks = date_breaks, date_labels = date_labels,
limits = (datelimits + c(-15, +1%)))
}
monthsscale <- function(date_breaks = "1 month", date_labels = "%b %y", datelimits = NULL) {
scale_x_date(date_breaks = date_breaks, date_labels = date_labels,
limits = (datelimits + c(-15, +15)))
}
runApp('Documents/Econovo/dza-prototype/shiny')
d <- daufwandkredi %>%
# filter(between_na(period, date_comparison()[1], date_comparison()[2])) %>%
group_by(Praxis, Feld) %>%
summarise(Wert = sum(Wert)) %>%
filter(Feld %in% c("Betrag.LeistungenDZA", "Betrag.Leistungen", "Betrag.Diverse",
"Betrag.Rabatt", "Betrag.Korrekturen")) %>%
pivot_wider(names_from = "Praxis", values_from = "Wert") %>%
arrange(Feld != "Betrag.Leistungen") %>%
arrange(Feld == "Betrag.LeistungenDZA") %>%
column_to_rownames("Feld")
d
daufwandkredi
d <- daufwandkredi %>%
# filter(between_na(period, date_comparison()[1], date_comparison()[2])) %>%
group_by(Praxis, Feld) %>%
summarise(Wert = sum(Wert)) %>%
pivot_wider(names_from = "Praxis", values_from = "Wert") %>%
# arrange(Feld != "Betrag.Leistungen") %>%
# arrange(Feld == "Betrag.LeistungenDZA") %>%
column_to_rownames("Feld")
datatable(d, selection = 'none',
options = list(dom = 't', rownames= F, sort = F)) %>%
formatStyle(names(d),
background = styleColorBar(range(d), '#00c0ef'),
backgroundSize = '98% 88%',
backgroundRepeat = 'no-repeat',
backgroundPosition = 'center') %>%
formatStyle(
0,
target = "row",
fontWeight = styleEqual("Betrag.LeistungenDZA", "bold")) %>%
formatRound(names(d), mark = "'")
d <- daufwandkredi %>%
# filter(between_na(period, date_comparison()[1], date_comparison()[2])) %>%
group_by(Praxis, Feld) %>%
summarise(Wert = sum(Wert)) %>%
pivot_wider(names_from = "Praxis", values_from = "Wert") %>%
adorn_totals("row") %>%
column_to_rownames("Feld")
datatable(d, selection = 'none',
options = list(dom = 't', rownames= F, sort = F)) %>%
formatStyle(names(d),
background = styleColorBar(range(d), '#00c0ef'),
backgroundSize = '98% 88%',
backgroundRepeat = 'no-repeat',
backgroundPosition = 'center') %>%
formatStyle(
0,
target = "row",
fontWeight = styleEqual("Betrag.LeistungenDZA", "bold")) %>%
formatRound(names(d), mark = "'")
0,
target = "row",
fontWeight = styleEqual("Total", "bold")) %>%
formatRound(names(d), mark = "'")
0,
target = "row",
fontWeight = styleEqual("Total", "bold")) %>%
formatRound(names(d), mark = "'")
d
datatable(d, selection = 'none',
options = list(dom = 't', rownames= F, sort = F)) %>%
formatStyle(names(d),
background = styleColorBar(range(d), '#00c0ef'),
backgroundSize = '98% 88%',
backgroundRepeat = 'no-repeat',
backgroundPosition = 'center')
datatable(d, selection = 'none',
options = list(dom = 't', rownames= F, sort = F)) %>%
formatStyle(names(d),
background = styleColorBar(range(d), '#00c0ef'),
backgroundSize = '98% 88%',
backgroundRepeat = 'no-repeat',
backgroundPosition = 'center') %>%
formatStyle(
0,
target = "row",
fontWeight = styleEqual("Total", "bold"))
datatable(d, selection = 'none',
options = list(dom = 't', rownames= F, sort = F)) %>%
formatStyle(names(d),
background = styleColorBar(range(d), '#00c0ef'),
backgroundSize = '98% 88%',
backgroundRepeat = 'no-repeat',
backgroundPosition = 'center') %>%
formatStyle(
0,
target = "row",
fontWeight = styleEqual("Total", "bold")) %>%
formatRound(names(d), mark = "'")
0,
target = "row",
fontWeight = styleEqual("Total", "bold")) %>%
formatRound(names(d), mark = "'")
datatable(d, selection = 'none',
options = list(dom = 't', rownames= F, sort = F)) %>%
formatStyle(names(d),
background = styleColorBar(range(d), '#00c0ef'),
backgroundSize = '98% 88%',
backgroundRepeat = 'no-repeat',
backgroundPosition = 'center') %>%
formatStyle(
0,
target = "row",
fontWeight = styleEqual("Total", "bold")) %>%
formatRound(names(d), mark = "'")
dbruttoloehne
d <- dbruttoloehne %>%
# filter(between_na(period, date_comparison()[1], date_comparison()[2])) %>%
group_by(Praxis, Funktion) %>%
summarise(Wert = sum(Wert)) %>%
pivot_wider(names_from = "Praxis", values_from = "Wert") %>%
adorn_totals("row") %>%
column_to_rownames("Feld")
dbruttoloehne %>%
# filter(between_na(period, date_comparison()[1], date_comparison()[2])) %>%
group_by(Praxis, Funktion) %>%
summarise(Wert = sum(Wert))
dbruttoloehne %>%
# filter(between_na(period, date_comparison()[1], date_comparison()[2])) %>%
group_by(Praxis, Funktion) %>%
summarise(Wert = sum(Wert, na.rm = T))
dbruttoloehne %>%
# filter(between_na(period, date_comparison()[1], date_comparison()[2])) %>%
group_by(Praxis, Funktion) %>%
summarise(Wert = sum(Wert, na.rm = T)) %>%
pivot_wider(names_from = "Praxis", values_from = "Wert") %>%
adorn_totals("row")
dbruttoloehne %>%
# filter(between_na(period, date_comparison()[1], date_comparison()[2])) %>%
group_by(Praxis, Funktion) %>%
summarise(Wert = sum(Wert, na.rm = T)) %>%
pivot_wider(names_from = "Praxis", values_from = "Wert")
d <- dbruttoloehne %>%
# filter(between_na(period, date_comparison()[1], date_comparison()[2])) %>%
group_by(Praxis, Funktion) %>%
summarise(Wert = sum(Wert, na.rm = T)) %>%
pivot_wider(names_from = "Praxis", values_from = "Wert") %>%
mutate(Funktion = ifelse(Funktion == "Za", "Bruttlöhne Za", "Bruttolöhne andere")) %>%
adorn_totals("row") %>%
column_to_rownames("Funktion")
dbruttoloehne %>%
# filter(between_na(period, date_comparison()[1], date_comparison()[2])) %>%
group_by(Praxis, Funktion) %>%
summarise(Wert = sum(Wert, na.rm = T)) %>%
pivot_wider(names_from = "Praxis", values_from = "Wert") %>%
mutate(Funktion = ifelse(Funktion == "Za", "Bruttlöhne Za", "Bruttolöhne andere")) %>%
adorn_totals("row")
d <- dbruttoloehne %>%
# filter(between_na(period, date_comparison()[1], date_comparison()[2])) %>%
group_by(Praxis, Funktion) %>%
summarise(Wert = sum(Wert, na.rm = T)) %>%
pivot_wider(names_from = "Praxis", values_from = "Wert") %>%
mutate(Funktion = case_when(Funktion == "Za" ~ "Bruttlöhne Za",
T ~ "Bruttolöhne andere")) %>%
adorn_totals("row") %>%
column_to_rownames("Funktion")
datatable(d, selection = 'none',
options = list(dom = 't', rownames= F, sort = F)) %>%
formatStyle(names(d),
background = styleColorBar(range(d), '#00c0ef'),
backgroundSize = '98% 88%',
backgroundRepeat = 'no-repeat',
backgroundPosition = 'center') %>%
formatStyle(
0,
target = "row",
fontWeight = styleEqual("Total", "bold")) %>%
formatRound(names(d), mark = "'")
runApp('Documents/Econovo/dza-prototype/shiny')
z <- dzawin %>%
filter(#between_na(period, date_dent()[1], date_dent()[2]),
# period == isolate(input[[paste0("month_dent_", name)]]),
Praxis == name,
is.na(Funktion)) %>%
# filter(period == ymd("2020-01-01"),
#        Praxis == "Pratteln",
#        Funktion == "Za") %>%
pivot_wider(names_from = "Feld",
values_from = "Wert")
z
d <- dbehandlerdetail %>%
filter(#between_na(period, date_dent()[1], date_dent()[2]),
# period == isolate(input[[paste0("month_dent_", name)]]),
Praxis == name) %>%
# filter(period == ymd("2020-01-01"),
#        Praxis == "Pratteln") %>%
select(Mitarbeiter, Funktion, Wert) %>%
pivot_wider(names_from = "Funktion",
values_from = "Wert")
dbehandlerdetail
d
dbehandlerdetail %>%
filter(#between_na(period, date_dent()[1], date_dent()[2]),
# period == isolate(input[[paste0("month_dent_", name)]]),
Praxis == name)
dbehandlerdetail %>%
filter(#between_na(period, date_dent()[1], date_dent()[2]),
# period == isolate(input[[paste0("month_dent_", name)]]),
Praxis == name) %>%
# filter(period == ymd("2020-01-01"),
#        Praxis == "Pratteln") %>%
select(Mitarbeiter, Funktion, Wert)
d <- dbehandlerdetail %>%
filter(#between_na(period, date_dent()[1], date_dent()[2]),
# period == isolate(input[[paste0("month_dent_", name)]]),
Praxis == name) %>%
# filter(period == ymd("2020-01-01"),
#        Praxis == "Pratteln") %>%
select(Mitarbeiter, Funktion, Wert) %>%
group_by(Mitarbeiter, Funktion) %>%
summarise(Wert = mean(Wert, na.rm = T)) %>%
pivot_wider(names_from = "Funktion",
values_from = "Wert")
l <- dbruttoloehne %>%
filter(#between_na(period, date_dent()[1], date_dent()[2]),
# period == isolate(input[[paste0("month_dent_", name)]]),
Praxis == name) %>%
# filter(period == ymd("2020-01-01"),
#        Praxis == "Pratteln") %>%
select(Mitarbeiter, Wert) %>%
rename(Bruttolohn = Wert)
l
runApp('Documents/Econovo/dza-prototype/shiny')
dzawin %>%
# filter(between_na(period, date_comparison()[1], date_comparison()[2])) %>%
group_by(Praxis, Feld) %>%
summarise(Wert = sum(Wert)) %>%
filter(Feld %in% c("Betrag.Total")) %>%
pivot_wider(names_from = "Praxis", values_from = "Wert") %>%
ungroup() %>%
group_by(Feld) %>%
summarise_if(is.numeric, sum)
runApp('Documents/Econovo/dza-prototype/shiny')
d <- bind_rows(comparison_table_zawin_tot_prep2(),
comparison_table_aufwand_prep() %>% mutate_if(is.numeric, ~ -.),
comparison_table_loehne_prep() %>% rename(Feld = Funktion) %>% mutate_if(is.numeric, ~ -.)) %>%
adorn_totals("row")
12500*1.1
95/125
12500-9500
13750-9500
9500-12000
13750-9500-500
install.packages("opencv")
devtools::install_github("ropensci/opencv")
devtools::install_github("ropensci/opencv")
library(opencv)
ocv_video(ocv_face)
ocv_video("2020-01-30 08-23-14.mp4")
ocv_video(path = "2020-01-30 08-23-14.mp4")
ocv_read(path = "2020-01-30 08-23-14.mp4")
x = ocv_read(path = "2020-01-30 08-23-14.mp4")
x = ocv_read(path = "~/Videos/videos/01-joanna-szabo-uranus-de-la-folie-ep22-145-chevenez-csij-2019_round-2.mp4")
install.packages("translateR")
library(translateR)
translate("hello world")
install.packages("googleLanguageR")
setwd("~/Documents/Econovo/interacting-anomalies")
shiny::runApp()
setwd("~/Documents/Econovo/interacting-anomalies")
source('~/Documents/Econovo/interacting-anomalies/helper_scripts/create_helper_vars.R', echo=TRUE)
runApp()
runApp()
source('~/.active-rstudio-document', echo=TRUE)
setwd("~/Documents/R/intensive-care")
italy <- read_excel("data/italy.xls")
italy
italy %>% head()
italy <- read_excel("data/italy.xls")
italy %>% head()
italy <- read_excel("data/italy.xls")
italy %>% head()
library(lubridate)
italy <- read_excel("data/italy.xls") %>%
mutate(Date = ymd(Date))
italy
italy %>%
select(1:10)
italy %>%
select(1:19)
italy %>%
select(1:22)
italy %>%
select(1:24)
italy %>%
select(1:23)
italy %>%
select(1:22)
italy %>%
select(1:22) %>%
pivot_longer(cols = -Date)
italy %>%
select(1:22) %>%
pivot_longer(cols = -"Date")
italy %>%
select(1:22) %>%
mutate_if(is.character, as.double)
italy %>%
select(1:22) %>%
mutate_if(is.character, as.double) %>%
pivot_longer(cols = -"Date")
italy %>%
select(1:22) %>%
mutate_if(is.character, as.double) %>%
pivot_longer(cols = -Date)
italy %>%
select(1:22) %>%
mutate_if(is.character, as.double) %>%
pivot_longer(cols = -Date) %>%
ggplot(aes(x = Date, y = value, color = name)) +
geom_line()
italy %>%
select(1:22) %>%
mutate_if(is.character, as.double) %>%
pivot_longer(cols = -Date) %>%
ggplot(aes(x = Date, y = value, color = name)) +
geom_polygon() +
facet_wrap(~name) +
theme(legend.position = "none")
italy %>%
select(1:22) %>%
mutate_if(is.character, as.double) %>%
pivot_longer(cols = -Date) %>%
ggplot(aes(x = Date, y = value, fill = name)) +
geom_polygon() +
facet_wrap(~name) +
theme(legend.position = "none")
italy %>%
select(1:22) %>%
mutate_if(is.character, as.double) %>%
pivot_longer(cols = -Date) %>%
filter(name == "LOM") %>%
ggplot(aes(x = Date, y = value, fill = name)) +
geom_polygon() +
facet_wrap(~name) +
theme(legend.position = "none")
p <- italy %>%
select(1:22) %>%
mutate_if(is.character, as.double) %>%
pivot_longer(cols = -Date) %>%
filter(name == "LOM") %>%
ggplot(aes(x = Date, y = value, fill = name)) +
geom_polygon() +
facet_wrap(~name) +
theme(legend.position = "none")
library(plotly)
ggplotly(p)
p <- italy %>%
select(1:22) %>%
mutate_if(is.character, as.double) %>%
pivot_longer(cols = -Date) %>%
filter(name == "LOM") %>%
ggplot(aes(x = Date, y = value, fill = name)) +
geom_polygon() +
geom_line() +
facet_wrap(~name) +
theme(legend.position = "none")
ggplotly(p)
p <- italy %>%
select(1:22) %>%
mutate_if(is.character, as.double) %>%
pivot_longer(cols = -Date) %>%
# filter(name == "LOM") %>%
ggplot(aes(x = Date, y = value, fill = name)) +
geom_polygon() +
geom_line() +
facet_wrap(~name) +
theme(legend.position = "none")
p
