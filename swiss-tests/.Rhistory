}
p +
monthsscale(datelimits = c(fromdate, todate))
p + monthsscale(datelimits = c(fromdate, todate))
monthsscale <- function(date_breaks = "1 month", date_labels = "%b %y", datelimits = NULL) {
scale_x_date(date_breaks = date_breaks, date_labels = date_labels,
limits = (datelimits + c(-10, +10)))
}
p + monthsscale(datelimits = c(fromdate, todate))
monthsscale <- function(date_breaks = "1 month", date_labels = "%b %y", datelimits = NULL) {
scale_x_date(date_breaks = date_breaks, date_labels = date_labels,
limits = (datelimits + c(-100, +100)))
}
p + monthsscale(datelimits = c(fromdate, todate))
monthsscale <- function(date_breaks = "1 month", date_labels = "%b %y", datelimits = NULL) {
scale_x_date(date_breaks = date_breaks, date_labels = date_labels,
limits = (datelimits + c(-13, +13)))
}
monthsscale <- function(date_breaks = "1 month", date_labels = "%b %y", datelimits = NULL) {
scale_x_date(date_breaks = date_breaks, date_labels = date_labels,
limits = (datelimits + c(-13, +13)))
}
p + monthsscale(datelimits = c(fromdate, todate))
monthsscale <- function(date_breaks = "1 month", date_labels = "%b %y", datelimits = NULL) {
scale_x_date(date_breaks = date_breaks, date_labels = date_labels,
limits = (datelimits + c(-134, +13)))
}
p + monthsscale(datelimits = c(fromdate, todate))
monthsscale <- function(date_breaks = "1 month", date_labels = "%b %y", datelimits = NULL) {
scale_x_date(date_breaks = date_breaks, date_labels = date_labels,
limits = (datelimits + c(-15, +13)))
}
p + monthsscale(datelimits = c(fromdate, todate))
monthsscale <- function(date_breaks = "1 month", date_labels = "%b %y", datelimits = NULL) {
scale_x_date(date_breaks = date_breaks, date_labels = date_labels,
limits = (datelimits + c(-15, +1%)))
}
monthsscale <- function(date_breaks = "1 month", date_labels = "%b %y", datelimits = NULL) {
scale_x_date(date_breaks = date_breaks, date_labels = date_labels,
limits = (datelimits + c(-15, +15)))
}
runApp('Documents/Econovo/dza-prototype/shiny')
d <- daufwandkredi %>%
# filter(between_na(period, date_comparison()[1], date_comparison()[2])) %>%
group_by(Praxis, Feld) %>%
summarise(Wert = sum(Wert)) %>%
filter(Feld %in% c("Betrag.LeistungenDZA", "Betrag.Leistungen", "Betrag.Diverse",
"Betrag.Rabatt", "Betrag.Korrekturen")) %>%
pivot_wider(names_from = "Praxis", values_from = "Wert") %>%
arrange(Feld != "Betrag.Leistungen") %>%
arrange(Feld == "Betrag.LeistungenDZA") %>%
column_to_rownames("Feld")
d
daufwandkredi
d <- daufwandkredi %>%
# filter(between_na(period, date_comparison()[1], date_comparison()[2])) %>%
group_by(Praxis, Feld) %>%
summarise(Wert = sum(Wert)) %>%
pivot_wider(names_from = "Praxis", values_from = "Wert") %>%
# arrange(Feld != "Betrag.Leistungen") %>%
# arrange(Feld == "Betrag.LeistungenDZA") %>%
column_to_rownames("Feld")
datatable(d, selection = 'none',
options = list(dom = 't', rownames= F, sort = F)) %>%
formatStyle(names(d),
background = styleColorBar(range(d), '#00c0ef'),
backgroundSize = '98% 88%',
backgroundRepeat = 'no-repeat',
backgroundPosition = 'center') %>%
formatStyle(
0,
target = "row",
fontWeight = styleEqual("Betrag.LeistungenDZA", "bold")) %>%
formatRound(names(d), mark = "'")
d <- daufwandkredi %>%
# filter(between_na(period, date_comparison()[1], date_comparison()[2])) %>%
group_by(Praxis, Feld) %>%
summarise(Wert = sum(Wert)) %>%
pivot_wider(names_from = "Praxis", values_from = "Wert") %>%
adorn_totals("row") %>%
column_to_rownames("Feld")
datatable(d, selection = 'none',
options = list(dom = 't', rownames= F, sort = F)) %>%
formatStyle(names(d),
background = styleColorBar(range(d), '#00c0ef'),
backgroundSize = '98% 88%',
backgroundRepeat = 'no-repeat',
backgroundPosition = 'center') %>%
formatStyle(
0,
target = "row",
fontWeight = styleEqual("Betrag.LeistungenDZA", "bold")) %>%
formatRound(names(d), mark = "'")
0,
target = "row",
fontWeight = styleEqual("Total", "bold")) %>%
formatRound(names(d), mark = "'")
0,
target = "row",
fontWeight = styleEqual("Total", "bold")) %>%
formatRound(names(d), mark = "'")
d
datatable(d, selection = 'none',
options = list(dom = 't', rownames= F, sort = F)) %>%
formatStyle(names(d),
background = styleColorBar(range(d), '#00c0ef'),
backgroundSize = '98% 88%',
backgroundRepeat = 'no-repeat',
backgroundPosition = 'center')
datatable(d, selection = 'none',
options = list(dom = 't', rownames= F, sort = F)) %>%
formatStyle(names(d),
background = styleColorBar(range(d), '#00c0ef'),
backgroundSize = '98% 88%',
backgroundRepeat = 'no-repeat',
backgroundPosition = 'center') %>%
formatStyle(
0,
target = "row",
fontWeight = styleEqual("Total", "bold"))
datatable(d, selection = 'none',
options = list(dom = 't', rownames= F, sort = F)) %>%
formatStyle(names(d),
background = styleColorBar(range(d), '#00c0ef'),
backgroundSize = '98% 88%',
backgroundRepeat = 'no-repeat',
backgroundPosition = 'center') %>%
formatStyle(
0,
target = "row",
fontWeight = styleEqual("Total", "bold")) %>%
formatRound(names(d), mark = "'")
0,
target = "row",
fontWeight = styleEqual("Total", "bold")) %>%
formatRound(names(d), mark = "'")
datatable(d, selection = 'none',
options = list(dom = 't', rownames= F, sort = F)) %>%
formatStyle(names(d),
background = styleColorBar(range(d), '#00c0ef'),
backgroundSize = '98% 88%',
backgroundRepeat = 'no-repeat',
backgroundPosition = 'center') %>%
formatStyle(
0,
target = "row",
fontWeight = styleEqual("Total", "bold")) %>%
formatRound(names(d), mark = "'")
dbruttoloehne
d <- dbruttoloehne %>%
# filter(between_na(period, date_comparison()[1], date_comparison()[2])) %>%
group_by(Praxis, Funktion) %>%
summarise(Wert = sum(Wert)) %>%
pivot_wider(names_from = "Praxis", values_from = "Wert") %>%
adorn_totals("row") %>%
column_to_rownames("Feld")
dbruttoloehne %>%
# filter(between_na(period, date_comparison()[1], date_comparison()[2])) %>%
group_by(Praxis, Funktion) %>%
summarise(Wert = sum(Wert))
dbruttoloehne %>%
# filter(between_na(period, date_comparison()[1], date_comparison()[2])) %>%
group_by(Praxis, Funktion) %>%
summarise(Wert = sum(Wert, na.rm = T))
dbruttoloehne %>%
# filter(between_na(period, date_comparison()[1], date_comparison()[2])) %>%
group_by(Praxis, Funktion) %>%
summarise(Wert = sum(Wert, na.rm = T)) %>%
pivot_wider(names_from = "Praxis", values_from = "Wert") %>%
adorn_totals("row")
dbruttoloehne %>%
# filter(between_na(period, date_comparison()[1], date_comparison()[2])) %>%
group_by(Praxis, Funktion) %>%
summarise(Wert = sum(Wert, na.rm = T)) %>%
pivot_wider(names_from = "Praxis", values_from = "Wert")
d <- dbruttoloehne %>%
# filter(between_na(period, date_comparison()[1], date_comparison()[2])) %>%
group_by(Praxis, Funktion) %>%
summarise(Wert = sum(Wert, na.rm = T)) %>%
pivot_wider(names_from = "Praxis", values_from = "Wert") %>%
mutate(Funktion = ifelse(Funktion == "Za", "Bruttlöhne Za", "Bruttolöhne andere")) %>%
adorn_totals("row") %>%
column_to_rownames("Funktion")
dbruttoloehne %>%
# filter(between_na(period, date_comparison()[1], date_comparison()[2])) %>%
group_by(Praxis, Funktion) %>%
summarise(Wert = sum(Wert, na.rm = T)) %>%
pivot_wider(names_from = "Praxis", values_from = "Wert") %>%
mutate(Funktion = ifelse(Funktion == "Za", "Bruttlöhne Za", "Bruttolöhne andere")) %>%
adorn_totals("row")
d <- dbruttoloehne %>%
# filter(between_na(period, date_comparison()[1], date_comparison()[2])) %>%
group_by(Praxis, Funktion) %>%
summarise(Wert = sum(Wert, na.rm = T)) %>%
pivot_wider(names_from = "Praxis", values_from = "Wert") %>%
mutate(Funktion = case_when(Funktion == "Za" ~ "Bruttlöhne Za",
T ~ "Bruttolöhne andere")) %>%
adorn_totals("row") %>%
column_to_rownames("Funktion")
datatable(d, selection = 'none',
options = list(dom = 't', rownames= F, sort = F)) %>%
formatStyle(names(d),
background = styleColorBar(range(d), '#00c0ef'),
backgroundSize = '98% 88%',
backgroundRepeat = 'no-repeat',
backgroundPosition = 'center') %>%
formatStyle(
0,
target = "row",
fontWeight = styleEqual("Total", "bold")) %>%
formatRound(names(d), mark = "'")
runApp('Documents/Econovo/dza-prototype/shiny')
z <- dzawin %>%
filter(#between_na(period, date_dent()[1], date_dent()[2]),
# period == isolate(input[[paste0("month_dent_", name)]]),
Praxis == name,
is.na(Funktion)) %>%
# filter(period == ymd("2020-01-01"),
#        Praxis == "Pratteln",
#        Funktion == "Za") %>%
pivot_wider(names_from = "Feld",
values_from = "Wert")
z
d <- dbehandlerdetail %>%
filter(#between_na(period, date_dent()[1], date_dent()[2]),
# period == isolate(input[[paste0("month_dent_", name)]]),
Praxis == name) %>%
# filter(period == ymd("2020-01-01"),
#        Praxis == "Pratteln") %>%
select(Mitarbeiter, Funktion, Wert) %>%
pivot_wider(names_from = "Funktion",
values_from = "Wert")
dbehandlerdetail
d
dbehandlerdetail %>%
filter(#between_na(period, date_dent()[1], date_dent()[2]),
# period == isolate(input[[paste0("month_dent_", name)]]),
Praxis == name)
dbehandlerdetail %>%
filter(#between_na(period, date_dent()[1], date_dent()[2]),
# period == isolate(input[[paste0("month_dent_", name)]]),
Praxis == name) %>%
# filter(period == ymd("2020-01-01"),
#        Praxis == "Pratteln") %>%
select(Mitarbeiter, Funktion, Wert)
d <- dbehandlerdetail %>%
filter(#between_na(period, date_dent()[1], date_dent()[2]),
# period == isolate(input[[paste0("month_dent_", name)]]),
Praxis == name) %>%
# filter(period == ymd("2020-01-01"),
#        Praxis == "Pratteln") %>%
select(Mitarbeiter, Funktion, Wert) %>%
group_by(Mitarbeiter, Funktion) %>%
summarise(Wert = mean(Wert, na.rm = T)) %>%
pivot_wider(names_from = "Funktion",
values_from = "Wert")
l <- dbruttoloehne %>%
filter(#between_na(period, date_dent()[1], date_dent()[2]),
# period == isolate(input[[paste0("month_dent_", name)]]),
Praxis == name) %>%
# filter(period == ymd("2020-01-01"),
#        Praxis == "Pratteln") %>%
select(Mitarbeiter, Wert) %>%
rename(Bruttolohn = Wert)
l
runApp('Documents/Econovo/dza-prototype/shiny')
dzawin %>%
# filter(between_na(period, date_comparison()[1], date_comparison()[2])) %>%
group_by(Praxis, Feld) %>%
summarise(Wert = sum(Wert)) %>%
filter(Feld %in% c("Betrag.Total")) %>%
pivot_wider(names_from = "Praxis", values_from = "Wert") %>%
ungroup() %>%
group_by(Feld) %>%
summarise_if(is.numeric, sum)
runApp('Documents/Econovo/dza-prototype/shiny')
d <- bind_rows(comparison_table_zawin_tot_prep2(),
comparison_table_aufwand_prep() %>% mutate_if(is.numeric, ~ -.),
comparison_table_loehne_prep() %>% rename(Feld = Funktion) %>% mutate_if(is.numeric, ~ -.)) %>%
adorn_totals("row")
12500*1.1
95/125
12500-9500
13750-9500
9500-12000
13750-9500-500
install.packages("opencv")
devtools::install_github("ropensci/opencv")
devtools::install_github("ropensci/opencv")
library(opencv)
ocv_video(ocv_face)
ocv_video("2020-01-30 08-23-14.mp4")
ocv_video(path = "2020-01-30 08-23-14.mp4")
ocv_read(path = "2020-01-30 08-23-14.mp4")
x = ocv_read(path = "2020-01-30 08-23-14.mp4")
x = ocv_read(path = "~/Videos/videos/01-joanna-szabo-uranus-de-la-folie-ep22-145-chevenez-csij-2019_round-2.mp4")
install.packages("translateR")
library(translateR)
translate("hello world")
install.packages("googleLanguageR")
setwd("~/Documents/R/intensive-care/swiss-tests")
library(tidyverse)
library(readxl)
test_deaths <- read_excel("https://www.bag.admin.ch/dam/bag/en/dokumente/mt/k-und-i/aktuelle-ausbrueche-pandemien/2019-nCoV/covid-19-basisdaten-fallzahlen.xlsx.download.xlsx/Dashboards_1&2_COVID19_swiss_data_pv.xlsx")
test_deaths <- read_excel("https://www.bag.admin.ch/dam/bag/en/dokumente/mt/k-und-i/aktuelle-ausbrueche-pandemien/2019-nCoV/covid-19-basisdaten-fallzahlen.xlsx.download.xlsx/Dashboards_1&2_COVID19_swiss_data_pv.xlsx")
library(rvest)
!GET("https://www.bag.admin.ch/dam/bag/en/dokumente/mt/k-und-i/aktuelle-ausbrueche-pandemien/2019-nCoV/covid-19-basisdaten-fallzahlen.xlsx.download.xlsx/Dashboards_1&2_COVID19_swiss_data_pv.xlsx")
download.file("https://www.bag.admin.ch/dam/bag/en/dokumente/mt/k-und-i/aktuelle-ausbrueche-pandemien/2019-nCoV/covid-19-basisdaten-fallzahlen.xlsx.download.xlsx/Dashboards_1&2_COVID19_swiss_data_pv.xlsx")
download.file(url = "https://www.bag.admin.ch/dam/bag/en/dokumente/mt/k-und-i/aktuelle-ausbrueche-pandemien/2019-nCoV/covid-19-basisdaten-fallzahlen.xlsx.download.xlsx/Dashboards_1&2_COVID19_swiss_data_pv.xlsx",
destfile = "data")
download.file(url = "https://www.bag.admin.ch/dam/bag/en/dokumente/mt/k-und-i/aktuelle-ausbrueche-pandemien/2019-nCoV/covid-19-basisdaten-fallzahlen.xlsx.download.xlsx/Dashboards_1&2_COVID19_swiss_data_pv.xlsx",
destfile = "data/")
download.file(url = "https://www.bag.admin.ch/dam/bag/en/dokumente/mt/k-und-i/aktuelle-ausbrueche-pandemien/2019-nCoV/covid-19-basisdaten-fallzahlen.xlsx.download.xlsx/Dashboards_1&2_COVID19_swiss_data_pv.xlsx",
destfile = "/data/")
download.file(url = "https://www.bag.admin.ch/dam/bag/en/dokumente/mt/k-und-i/aktuelle-ausbrueche-pandemien/2019-nCoV/covid-19-basisdaten-fallzahlen.xlsx.download.xlsx/Dashboards_1&2_COVID19_swiss_data_pv.xlsx",
destfile = "/data")
download.file(url = "https://www.bag.admin.ch/dam/bag/en/dokumente/mt/k-und-i/aktuelle-ausbrueche-pandemien/2019-nCoV/covid-19-basisdaten-fallzahlen.xlsx.download.xlsx/Dashboards_1&2_COVID19_swiss_data_pv.xlsx",
destfile = "/data/yolo.xlsx")
positivity <- read_excel("data/Dashboard_3_COVID19_labtests_positivity.xlsx")
positivity
testing <- read_excel("data/Dashboards_1&2_COVID19_swiss_data_pv.xlsx")
positivity %>%
ggplot(x = Datum, y = Number_of_tests, fill = Outcome_tests) +
geom_polygon()
positivity %>%
ggplot(aes(x = Datum, y = Number_of_tests, fill = Outcome_tests)) +
geom_polygon()
positivity
positivity %>%
ggplot(aes(x = Datum, y = Number_of_tests, fill = Outcome_tests)) +
geom_area()
library(lubridate)
positivity_weekly <- positivity %>%
mutate(week = week(Datum))
positivity_weekly
positivity_weekly <- positivity %>%
mutate(Kalenderwoche = week(Datum))
positivity %>%
group_by(Kalenderwoche, Outcome_tests) %>%
summarise(Number_of_tests = sum(Number_of_tests)) %>%
ggplot(aes(x = Datum, y = Number_of_tests, fill = Outcome_tests)) +
geom_area()
positivity %>%
group_by(Kalenderwoche, Outcome_tests) %>%
summarise(Number_of_tests = sum(Number_of_tests)) %>%
ggplot(aes(x = Kalenderwoche, y = Number_of_tests, fill = Outcome_tests)) +
geom_area()
positivity_weekly %>%
group_by(Kalenderwoche, Outcome_tests) %>%
summarise(Number_of_tests = sum(Number_of_tests)) %>%
ggplot(aes(x = Kalenderwoche, y = Number_of_tests, fill = Outcome_tests)) +
geom_area()
positivity_weekly %>%
group_by(Kalenderwoche, Outcome_tests) %>%
summarise(Number_of_tests = sum(Number_of_tests)) %>%
ggplot(aes(x = Kalenderwoche, y = Number_of_tests, fill = Outcome_tests)) +
geom_col()
testing
testing
positivity_weekly <- positivity %>%
mutate(Kalenderwoche = week(Datum)) %>%
group_by(Kalenderwoche, Outcome_tests) %>%
summarise(Number_of_tests = sum(Number_of_tests))
positivity_weekly
positivity
testing_weekly
testing
testing %>%
group_by(fallklasse_3) %>%
count()
testing %>%
group_by(fallklasse_3) %>%
count() %>% View()
testing %>%
group_by(pttoddat) %>%
count() %>% View()
testing %>%
group_by(pttod_1) %>%
count() %>% View()
testing
testing_weekly <- testing %>%
mutate(Kalenderwoche = week(fall_dt)) %>%
group_by(ktn, akl, sex, Geschlecht) %>%
summarise(fallklasse_3 = sum(fallklasse_3, na.rm = T), pttoddat = sum(pttoddat, na.rm = T), pttod_1 = sum(pttod_1, na.rm = T))
testing
testing_weekly <- testing %>%
mutate(fall_dt = ymd(fall_dt)) %>%
mutate(Kalenderwoche = week(fall_dt)) %>%
group_by(ktn, akl, sex, Geschlecht) %>%
summarise(fallklasse_3 = sum(fallklasse_3, na.rm = T), pttoddat = sum(pttoddat, na.rm = T), pttod_1 = sum(pttod_1, na.rm = T))
testing_weekly <- testing %>%
mutate(fall_dt = ymd(fall_dt))
testing
testing
positivity
positivity %>%
filter(Outcome_tests == "Positive")
positivity %>%
filter(Outcome_tests == "Positive") %>%
mutate(change = Number_of_tests/lag(Number_of_tests)-1)
positivity %>%
filter(Outcome_tests == "Positive") %>%
mutate(change = Number_of_tests/lag(Number_of_tests)-1) %>%
ggplot(aes(x = Datum, y = change)) +
geom_line()
testing <- read_excel("data/Dashboards_1&2_COVID19_swiss_data_pv.xlsx")
positivity %>%
filter(Outcome_tests == "Positive") %>%
mutate(change = Number_of_tests/lag(Number_of_tests)-1) %>%
ggplot(aes(x = Datum, y = change)) +
geom_line()
positivity
positivity %>%
filter(Outcome_tests == "Positive") %>%
mutate(avg3 = mean(lag(Number_of_tests), lag(Number_of_tests, 2), lag(Number_of_tests, 3)))
positivity %>%
filter(Outcome_tests == "Positive") %>%
mutate(avg3 = (lag(Number_of_tests), lag(Number_of_tests, 2), lag(Number_of_tests, 3))/3)
positivity %>%
filter(Outcome_tests == "Positive") %>%
mutate(avg3 = (lag(Number_of_tests) + lag(Number_of_tests, 2) +  lag(Number_of_tests, 3))/3)
positivity %>%
filter(Outcome_tests == "Positive") %>%
mutate(avg3 = (lag(Number_of_tests) + lag(Number_of_tests, 2) + lag(Number_of_tests, 3))/3) %>%
mutate(change = Number_of_tests/lag(Number_of_tests)-1,
change3 = Number_of_tests/avg3) %>%
ggplot(aes(x = Datum, y = change3)) +
geom_line()
positivity %>%
filter(Outcome_tests == "Positive") %>%
mutate(avg3 = (lag(Number_of_tests) + lag(Number_of_tests, 2) + lag(Number_of_tests, 3))/3,
avg7 = (lag(Number_of_tests) + lag(Number_of_tests, 2) + lag(Number_of_tests, 3) +
lag(Number_of_tests, 4) + lag(Number_of_tests, 5) + lag(Number_of_tests, 6) + lag(Number_of_tests, 7))/7) %>%
mutate(change = Number_of_tests/lag(Number_of_tests)-1,
change3 = Number_of_tests/avg3,
change7 = Number_of_tests/avg7) %>%
ggplot(aes(x = Datum, y = change7)) +
geom_line()
# change relative to same day last week
positivity %>%
filter(Outcome_tests == "Positive") %>%
mutate(changeW = Number_of_tests/lag(Number_of_tests, 7)-1) %>%
ggplot(aes(x = Datum, y = changeW)) +
geom_line()
# change relative to same day last week
positivity %>%
filter(Outcome_tests == "Positive",
Datum >= as.Date("2020-06-01")) %>%
mutate(changeW = Number_of_tests/lag(Number_of_tests, 7)-1) %>%
ggplot(aes(x = Datum, y = changeW)) +
geom_line()
testing
testing %>% filter(is.na(fall_dt)) %>% unique(ktn)
testing %>% filter(is.na(fall_dt)) %>% distinct(ktn)
testing %>% filter(is.na(fall_dt)) %>% select(ktn) %>% distinct()
testing %>%  tail()
testing
testing %>% mutate(fall_dt = ymd(fall_dt)) %>% filter(is.na(fall_dt)) %>% distinct(ktn)
testing %>% mutate(fall_dt = ymd(fall_dt)) %>% filter(!is.na(fall_dt)) %>% distinct(ktn)
testing %>% mutate(fall_dt = ymd(fall_dt))
testing %>% mutate(fall_dt = ymd(fall_dt)) %>% group_by(fall_dt) %>% count()
testing %>% mutate(fall_dt = ymd(fall_dt)) %>% group_by(fall_dt) %>% count() %>% ggplot(aes(x = fall_dt, y = n)) + geom_line()
testing
testing %>%
mutate(fall_dt = ymd(fall_dt)) %>%
filter(!is.na(fall_dt))
testing
testing %>%
mutate(fall_dt = ymd(fall_dt)) %>%
filter(!is.na(fall_dt)) %>%
ggplot(aes(x = Datum, y = fallklasse_3, color = ktn)) +
geom_area() +
facet_wrap(~Geschlecht)
testing %>%
mutate(fall_dt = ymd(fall_dt)) %>%
filter(!is.na(fall_dt)) %>%
ggplot(aes(x = fall_dt, y = fallklasse_3, color = ktn)) +
geom_area() +
facet_wrap(~Geschlecht)
testing %>%
mutate(fall_dt = ymd(fall_dt)) %>%
filter(!is.na(fall_dt),
Geschlecht != "Unbekannt") %>%
ggplot(aes(x = fall_dt, y = fallklasse_3, fill = ktn)) +
geom_area() +
facet_wrap(~Geschlecht)
testing %>%
mutate(fall_dt = ymd(fall_dt)) %>%
filter(!is.na(fall_dt),
Geschlecht != "Unbekannt") %>%
ggplot(aes(x = fall_dt, y = fallklasse_3, fill = ktn)) +
geom_col() +
facet_wrap(~Geschlecht)
testing %>%
mutate(fall_dt = ymd(fall_dt)) %>%
filter(!is.na(fall_dt),
Geschlecht != "Unbekannt") %>%
ggplot(aes(x = fall_dt, y = pttod_1, fill = ktn)) +
geom_col() +
facet_wrap(~Geschlecht)
testing %>%
mutate(fall_dt = ymd(fall_dt)) %>%
filter(!is.na(fall_dt),
Geschlecht != "Unbekannt") %>%
ggplot(aes(x = fall_dt, y = fallklasse_3, fill = ktn)) +
geom_col() +
facet_wrap(~Geschlecht)
positivity %>%
group_by(Datum) %>%
summarise(Number_of_tests = sum(Number_of_tests)) %>%
ggplot(aes(x = Datum, y = Number_of_tests)) +
geom_col()
